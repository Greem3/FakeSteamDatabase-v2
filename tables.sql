--PAISES
CREATE TABLE COUNTRIES(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    COU_NAME VARCHAR(100) NOT NULL UNIQUE
)

--Provincias
CREATE TABLE PROVINCES(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    PRO_NAME VARCHAR(100) NOT NULL,
    COU_ID INT NOT NULL,
    FOREIGN KEY (COU_ID) REFERENCES COUNTRIES(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE (PRO_NAME, COU_ID)
)

--Localidades
CREATE TABLE LOCALITIES(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    LOC_NAME VARCHAR(100) NOT NULL,
    PRO_ID INT NOT NULL,
    FOREIGN KEY (PRO_ID) REFERENCES PROVINCES(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE (LOC_NAME, PRO_ID)
)

--Direcciones totales
CREATE TABLE DIRECTIONS(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    LOC_ID INT,
    PRO_ID INT,
    COU_ID INT,
    FOREIGN KEY (LOC_ID) REFERENCES LOCALITIES(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (PRO_ID) REFERENCES PROVINCES(ID),
    FOREIGN KEY (COU_ID) REFERENCES COUNTRIES(ID),
    UNIQUE (LOC_ID, PRO_ID, COU_ID)
)

--Permisos para los roles
CREATE TABLE PERMISSIONS(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    PER_NAME VARCHAR(100) NOT NULL UNIQUE,
    PER_DESCRIPTION VARCHAR(500)
)

--Roles que usaran esos permisos
CREATE TABLE ROLES(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    ROL_NAME VARCHAR(100) NOT NULL UNIQUE,
    OBLIGATORY BIT DEFAULT 0 NOT NULL
)

--Los permisos que tendran los roles mediante una tabla de interseccion
CREATE TABLE ROLES_PERMISSIONS(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    ROL_ID INT NOT NULL,
    PER_ID INT NOT NULL,
    FOREIGN KEY (ROL_ID) REFERENCES ROLES(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (PER_ID) REFERENCES PERMISSIONS(ID) ON DELETE CASCADE ON UPDATE CASCADE
)

--Supertipos para cuentas
CREATE TABLE ACCOUNTS(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    ACCOUNT_NAME VARCHAR(100) NOT NULL UNIQUE DEFAULT '',
    USERNAME NVARCHAR(100) NOT NULL,
    INFO NVARCHAR(2000) DEFAULT 'Hello! i''m a new user!',
    PROFILE_PICTURE VARCHAR(2048) CHECK (PATINDEX('https://%.[a-z][a-z][a-z]%', PROFILE_PICTURE) > 0) DEFAULT 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fvectorified.com%2Fimages%2Fanonymous-user-icon-26.jpg&f=1&nofb=1&ipt=c65989660fc66c76ccdde6970c0e31426e55c7b85388dfc3553c7691db13fb6d&ipo=images',
    CREATE_DATE DATE DEFAULT GETDATE() NOT NULL,
    DIRECTION_ID INT,
    PASSWORD T_PASSWORD,
    EMAIL NVARCHAR(255) NOT NULL,
    WALLET MONEY NOT NULL DEFAULT 0,
    ACCOUNT_TYPE CHAR(1) NOT NULL CHECK (ACCOUNT_TYPE IN ('U', 'D')) DEFAULT 'U',
    ROL_ID INT NOT NULL DEFAULT 1,
    FOREIGN KEY (DIRECTION_ID) REFERENCES DIRECTIONS(ID),
    FOREIGN KEY (ROL_ID) REFERENCES ROLES(ID)
)

--Usuarios
CREATE TABLE USERS(
    ACCOUNT_ID INT PRIMARY KEY NOT NULL,
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE
)

--Desarrolladores de los juegos
CREATE TABLE DEVELOPERS(
    ACCOUNT_ID INT PRIMARY KEY,
    WEB_PAGE NVARCHAR(300),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE
)

--Los followers de usuarios a developers
CREATE TABLE FOLLOWS(
    ACCOUNT_ID INT,
    ACCOUNT_ID_DEV INT,
    PRIMARY KEY (ACCOUNT_ID, ACCOUNT_ID_DEV),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ACCOUNT_ID_DEV) REFERENCES DEVELOPERS(ACCOUNT_ID)
)

--TODO: Poder guardar archivos en GAMES
--Juegos que se venderan
CREATE TABLE GAMES(
    ID INT IDENTITY (1, 1) PRIMARY KEY,
    GAME_NAME NVARCHAR(150) NOT NULL UNIQUE,
    --Los juegos pueden tener el mismo desarrollador como editor, pero no son lo mismo
    ID_DEV INT NOT NULL,
    ID_EDT INT NOT NULL,
    --La informacion necesita ser mayor que 100 para poder insertarse en la base de datos
    INFO NVARCHAR(MAX) CHECK (LEN(INFO) >= 100) NOT NULL,
    PRICE MONEY NOT NULL DEFAULT 0,
    --Original Game solo no puede ser NULL si el juego es un DLC, si no es un DLC tiene que ser NULL
    CREATED_DATE DATE DEFAULT GETDATE() NOT NULL,
    ORIGINAL_GAME INT,
    --Si el juego est√° publico puede ser comprado por cualquier usuario, si no esta publico no se puede comprar pero seguira estando en las bibliotecas de las personas
    PUBLISHED BIT DEFAULT 1 NOT NULL,
    FOREIGN KEY (ORIGINAL_GAME) REFERENCES GAMES(ID),
    FOREIGN KEY (ID_DEV) REFERENCES DEVELOPERS(ACCOUNT_ID),
    FOREIGN KEY (ID_EDT) REFERENCES DEVELOPERS(ACCOUNT_ID)
)

--Bibliotecas de los jugadores
CREATE TABLE BOOKSTORES(
    ACCOUNT_ID INT,
    ID_GAME INT,
    HOURS_PLAYED INT DEFAULT 0 NOT NULL,
    GIVEN BIT DEFAULT 0 NOT NULL,
    PRIMARY KEY(ACCOUNT_ID, ID_GAME),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_GAME) REFERENCES GAMES(ID) ON DELETE CASCADE ON UPDATE CASCADE
)

--Logros para los juegos
CREATE TABLE ACHIEVEMENTS(
    ID INT PRIMARY KEY IDENTITY(1,1),
    ID_GAME INT NOT NULL,
    ACH_NAME NVARCHAR(100) NOT NULL,
    INFO NVARCHAR(255),
    --Si el logro es secreto todos los jugadores pueden ver la informacion, sino, solo los que lo desbloquearon pueden ver la informacion
    IS_SECRET BIT DEFAULT 0 NOT NULL,
    --"ID" segun el juego
    NUMBER INT NOT NULL,
    FOREIGN KEY (ID_GAME) REFERENCES GAMES(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE (ID_GAME, ACH_NAME),
    UNIQUE (ID_GAME, NUMBER)
)

--Tabla de interseccion entre achievements y users
CREATE TABLE ACCOUNTS_ACHS(
    ID_ACH INT NOT NULL,
    ACCOUNT_ID INT NOT NULL,
    PRIMARY KEY (ID_ACH, ACCOUNT_ID),
    FOREIGN KEY (ID_ACH) REFERENCES ACHIEVEMENTS(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE
)

--Votos positivos o negativos a juegos de steam
CREATE TABLE VOTES(
    ACCOUNT_ID INT,
    ID_GAME INT,
    --Si el voto es positivo o negativo
    VOTE_TYPE BIT NOT NULL,
    INFO NVARCHAR(MAX),
    PRIMARY KEY (ACCOUNT_ID, ID_GAME),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_GAME) REFERENCES GAMES(ID) ON DELETE CASCADE ON UPDATE CASCADE
)

--Transacciones para comprar juegos
CREATE TABLE TRANSACTIONS(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    ACCOUNT_ID INT,
    TRANS_DATE DATE DEFAULT GETDATE() NOT NULL,
    USE_CARD BIT DEFAULT 1 NOT NULL,
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID)
)

--Juegos que hay en una sola transaccion
CREATE TABLE TRANS_GAMES(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    TRANSACTION_ID INT NOT NULL,
    ID_GAME INT NOT NULL,
    GIFT BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTIONS(ID),
    FOREIGN KEY (ID_GAME) REFERENCES GAMES(ID)
)

--Lista de deseo de las cuentas
CREATE TABLE WISHLISTS(
    ACCOUNT_ID INT NOT NULL,
    GAME_ID INT NOT NULL,
    PRIMARY KEY (ACCOUNT_ID, GAME_ID),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (GAME_ID) REFERENCES GAMES(ID) ON DELETE CASCADE ON UPDATE CASCADE,
)

--Generos de los juegos
CREATE TABLE GAMES_GENRES(
    ID INT PRIMARY KEY IDENTITY (1, 1),
    GEN_NAME VARCHAR(30) NOT NULL UNIQUE
)

--Tabla de interseccion entre los juegos y sus generos
CREATE TABLE GEN_GAMES(
    ID_GAME INT,
    GENRE_ID INT,
    PRIMARY KEY (ID_GAME, GENRE_ID),
    FOREIGN KEY (ID_GAME) REFERENCES GAMES(ID),
    FOREIGN KEY (GENRE_ID) REFERENCES GAMES_GENRES(ID)
)